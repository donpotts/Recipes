@inject AppService AppService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ISnackbar Snackbar
@inject HttpClient HttpClient

<EditForm Model="@record" OnValidSubmit="@OnSubmit">
    <DataAnnotationsValidator />
    <MudDialog>
        <TitleContent>
            <MudText Typo="Typo.h6">Add Review</MudText>
        </TitleContent>
        <DialogContent>
            <MudTextField @bind-Value="record.User" For="@(() => record.User)" Label="User" ReadOnly="true" />
            <MudNumericField @bind-Value="record.Rating" For="@(() => record.Rating)" Label="Rating" Min="1" Max="5" />
            <MudTextField @bind-Value="record.Comment" For="@(() => record.Comment)" Label="Comment" Lines="4" AutoGrow="true" MaxLines="20" />
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="OnCancel">Cancel</MudButton>
            <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary">Add</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>

@code {

    [CascadingParameter]
    MudDialogInstance? MudDialog { get; set; }

    private Reviews record = new Reviews {Rating = 5,Comment = "Excellent!"};

    private string GetAbsoluteUri(string uri)
    {
        if (!uri.StartsWith("/"))
        {
            return uri;
        }

        var baseUri = HttpClient.BaseAddress;

        if (baseUri == null)
        {
            throw new Exception("Unable to determine base address");
        }

        Uri absolute = new(baseUri, uri);

        return absolute.ToString();
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            record.User = authState.User.Identity!.Name;
        }
        catch(Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private void OnCancel()
    {
        MudDialog?.Cancel();
    }

    private async void OnSubmit()
    {
        try
        {
            var review = await AppService.InsertReviewsAsync(record);
            //MudDialog?.Close();
            MudDialog?.Close(DialogResult.Ok(review?.Id));
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private async Task<string?> UploadImageAsync(IBrowserFile file, int maxWidth = 1440, int maxHeight = 1440)
    {
        if (file.ContentType != "image/png" && file.ContentType != "image/jpeg")
        {
            Snackbar.Add("Only PNG or JPEG images can be uploaded.", Severity.Error);
            return null;
        }

        var image = await file.RequestImageFileAsync("image/png", maxWidth, maxHeight);

        try
        {
            return await AppService.UploadImageAsync(image);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
        return null;
    }
}
