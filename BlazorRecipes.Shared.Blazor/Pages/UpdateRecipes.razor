@inject AppService AppService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject HttpClient HttpClient
@attribute [Authorize]

<style>
.mud-btn-nowrap {
    white-space: nowrap;
}

.mud-btn-margin {
    margin-top: 15px;
}
</style>

@if (record == null)
{
    <MudDialog>
        <TitleContent>
            <MudText Typo="Typo.h6">Update Recipes</MudText>
        </TitleContent>
        <DialogContent>
            <MudText>Loading...</MudText>
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="OnCancel">Cancel</MudButton>
            <MudButton Color="Color.Primary" Disabled="true">Update</MudButton>
        </DialogActions>
    </MudDialog>
}
else
{
    <EditForm Model="@record" OnValidSubmit="@OnSubmit">
        <DataAnnotationsValidator />
        <MudDialog >
            <TitleContent>
                <MudText Typo="Typo.h6">Update Recipes</MudText>
            </TitleContent>
            <DialogContent>
                <MudTextField @bind-Value="record.Name" For="@(() => record.Name)" Label="Name" />
                <MudTextField @bind-Value="record.Source" For="@(() => record.Source)" Label="Source" />
                <MudTextField @bind-Value="record.RecipeIngredients" For="@(() => record.RecipeIngredients)" Label="Ingredients" Lines="4" AutoGrow="true" MaxLines="20" />
                <MudTextField @bind-Value="record.PrepTime" For="@(() => record.PrepTime)" Label="PrepTime" />
                <MudTextField @bind-Value="record.CookTime" For="@(() => record.CookTime)" Label="CookTime" />
                <MudNumericField @bind-Value="record.Servings" For="@(() => record.Servings)" Label="Servings" />
                <MudTextField @bind-Value="record.Instructions" For="@(() => record.Instructions)" Label="Instructions" Lines="4" AutoGrow="true" MaxLines="4" />
                <MudGrid>
                    <MudItem xs="8" sm="8">
                        @if (!string.IsNullOrEmpty(record.Photo))
                        {
                            <MudImage Src="@GetAbsoluteUri(record.Photo)" Style="width:100%;height:256px;object-fit:contain;" Class="mt-1" />
                        }
                    </MudItem>
                    <MudItem xs="4" sm="4" Style="display: flex; justify-content: flex-end;">
                        <MudFileUpload T="IBrowserFile" FilesChanged="@(async args => record.Photo = await UploadImageAsync(args, 1440, 1440))" Accept=".png,.jpg,.jpeg">
                            <ButtonTemplate Context="btnContext">
                                <MudButton HtmlTag="label" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.CloudUpload" for="@btnContext">
                                    Upload Photo
                                </MudButton>
                            </ButtonTemplate>
                        </MudFileUpload>
                    </MudItem>
                </MudGrid>
                <MudPaper Elevation="1" Outlined="true" Padding="16px">
                    <div style="padding:16px;">
                    <MudGrid>
                        <MudItem xs="8" sm="8">
                            <MudText Typo="Typo.h6">Add Ingredient</MudText>
                        </MudItem>
                        <MudItem xs="4" sm="4" Style="display: flex; justify-content: flex-end;">
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mud-btn-nowrap mud-btn-margin" OnClick="@(e => OnAddIngredients(record))" Style="width: 100%;">Add Ingredient</MudButton>
                        </MudItem>
                    </MudGrid>
                    <MudGrid>
                        <MudItem xs="8" sm="8">
                            <MudNumericField @bind-Value="quantity" Label="Enter quantity" Step="0.01" />
                        </MudItem>
                    </MudGrid>
                    <MudGrid Style="margin-bottom: 10px;" >
                        <MudItem xs="8" sm="8">
                            <MudSelect T="string" Label="Unit Measurement" @bind-Value="selectedUnit" AnchorOrigin="Origin.BottomCenter">
                                @foreach (var units in unitsArray ?? Enumerable.Empty<Units>())
                                {
                                    <MudSelectItem T="string" Value="@units.Name">@units.Name</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>
                    </MudGrid>
                    <MudItem Style="margin-bottom: 10px;" >
                        <MudText Typo="Typo.inherit">of</MudText>
                    </MudItem>
                    <MudGrid>
                        <MudItem xs="8" sm="8">
                            <MudSelect T="string" Label="Ingredient" @bind-Value="selectedIngredient" AnchorOrigin="Origin.BottomCenter">
                                @foreach (var ingredients in ingredientsArray ?? Enumerable.Empty<Ingredients>())
                                {
                                    <MudSelectItem T="string" Value="@ingredients.Name">@ingredients.Name</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>
                    </MudGrid>
                    </Div>
                </MudPaper>
                <MudGrid Style="display: flex; justify-content: space-between;">
                    <MudItem xs="8" sm="8">
                        <MudSelect T="long?" Label="Tags" MultiSelection="true" @bind-SelectedValues="recipeTagsValues" MultiSelectionTextFunc="@(x => string.Join(", ", x.Select(s => recipeTagsArray?.FirstOrDefault(i => i.Id?.ToString() == s)?.Name)))" AnchorOrigin="Origin.BottomCenter">
                            @foreach (var recipeTags in recipeTagsArray ?? Enumerable.Empty<Tags>())
                            {
                                <MudSelectItem T="long?" Value="@recipeTags.Id">@recipeTags.Name</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    @* <MudItem xs="4" sm="4" Style="display: flex; justify-content: flex-end;">
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mud-btn-nowrap mud-btn-margin" Style="width: 100%;">Add Tag</MudButton>
                    </MudItem> *@
                </MudGrid>
                @* <MudSelect T="long?" Label="Reviews" MultiSelection="true" @bind-SelectedValues="reviewsValues" MultiSelectionTextFunc="@(x => string.Join(", ", x.Select(s => reviewsArray?.FirstOrDefault(i => i.Id?.ToString() == s)?.Rating)))" AnchorOrigin="Origin.BottomCenter">
                    @foreach (var reviews in reviewsArray ?? Enumerable.Empty<Reviews>())
                    {
                        <MudSelectItem T="long?" Value="@reviews.Id">@reviews.Rating</MudSelectItem>
                    }
                </MudSelect> *@
            </DialogContent>
            <DialogActions>
                <MudButton OnClick="OnCancel">Cancel</MudButton>
                <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary">Update</MudButton>
            </DialogActions>
        </MudDialog>
    </EditForm>

    
}

@code {
    [Parameter]
    public long Id { get; set; }

    private double quantity = 1;
    private string selectedUnit = "";
    private string selectedIngredient = "";

    [CascadingParameter]
    MudDialogInstance? MudDialog { get; set; }

    private Tags[]? recipeTagsArray;
    private IEnumerable<long?>? recipeTagsValues;
    private Ingredients[]? ingredientsArray;
    private Units[]? unitsArray;
    private Reviews[]? reviewsArray;
    private IEnumerable<long?>? reviewsValues;
    private Recipes? record;

    private string GetAbsoluteUri(string uri)
    {
        if (!uri.StartsWith("/"))
        {
            return uri;
        }

        var baseUri = HttpClient.BaseAddress;

        if (baseUri == null)
        {
            throw new Exception("Unable to determine base address");
        }

        Uri absolute = new(baseUri, uri);

        return absolute.ToString();
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            recipeTagsArray = await AppService.ListTagsAsync();
            ingredientsArray = await AppService.ListIngredientsAsync();
            unitsArray = await AppService.ListUnitsAsync();
            reviewsArray = await AppService.ListReviewsAsync();
            record = await AppService.GetRecipesByIdAsync(Id);
            recipeTagsValues = record?.Tags?.Select(x => x.Id).ToHashSet() ?? [];
            // ingredientsValues = record?.Ingredients?.Select(x => x.Id).ToHashSet() ?? [];
            // unitsValues = record?.Units?.Select(x => x.Id).ToHashSet() ?? [];
            reviewsValues = record?.Reviews?.Select(x => x.Id).ToHashSet() ?? [];
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private void OnCancel()
    {
        MudDialog?.Cancel();
    }

    private async void OnSubmit()
    {
        if (record == null)
        {
            return;
        }

        try
        {
            record.Tags = recipeTagsValues?.Select(x => new Tags { Id = x }).ToList();
            // record.Ingredients = ingredientsValues?.Select(x => new Ingredients { Id = x }).ToList();
            // record.Units = unitsValues?.Select(x => new Units { Id = x }).ToList();
            record.Reviews = reviewsValues?.Select(x => new Reviews { Id = x }).ToList();
            await AppService.UpdateRecipesAsync(Id, record);
            MudDialog?.Close();
            await OnInitializedAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private async Task<string?> UploadImageAsync(IBrowserFile file, int maxWidth = 1440, int maxHeight = 1440)
    {
        if (file.ContentType != "image/png" && file.ContentType != "image/jpeg")
        {
            Snackbar.Add("Only PNG or JPEG images can be uploaded.", Severity.Error);
            return null;
        }

        var image = await file.RequestImageFileAsync("image/png", maxWidth, maxHeight);

        try
        {
            return await AppService.UploadImageAsync(image);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }

        return null;
    }

    private void OnAddIngredients(Recipes record)
    {
        string newIngredient = quantity + " " + selectedUnit + " of " + selectedIngredient;

        if (string.IsNullOrEmpty(record.RecipeIngredients))
        {
            record.RecipeIngredients = newIngredient;
        }
        else
        {
            record.RecipeIngredients += "\n" + newIngredient;
        }
        
    }
}
